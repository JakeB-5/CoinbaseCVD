using ScottPlot;
using SkiaSharp;

namespace CBCVD.Processor;

public class CVDProcessor
{
    public string[] symbols = new string[] { "BTC-USD", "ETH-USD", "SOL-USD" };

    public async Task<Dictionary<string, Stream>> Run()
    {
        Dictionary<string, Stream> results = new();
        
        foreach (var symbol in symbols)
        {
            var imageStream = await GenerateCVD(symbol);
            results.Add(symbol, imageStream);
        }

        return results;
    }
    
    private async Task<Stream> GenerateCVD(string symbol)
    {
        TimeSpan range = TimeSpan.FromDays(14);
        var collector = new Collector(symbol);
        await collector.Start();
        var aggressive = new Aggressive(symbol);
        aggressive.Start();
        var calculator = new Calculator(symbol);
        (var prices, var series) = calculator.Start();

        prices = prices.Where(x => x.Key >= prices.Keys.Last().AddMinutes(-range.TotalMinutes))
            .ToDictionary(x => x.Key, x => x.Value);
        foreach (var cvdSeries in series)
        {
            cvdSeries.CVDData = cvdSeries.CVDData
                .Where(x => x.Timestamp >= prices.Keys.Last().AddMinutes(-range.TotalMinutes))
                .ToList();
            cvdSeries.Normalize();
        }

        double[] dataX = prices.Keys.Select(x => x.AddHours(9).ToOADate()).ToArray();
        var r = new SKBitmap(1200, 800);
        var s = new SKCanvas(r);

        Plot myPlot = new Plot();
        myPlot.FixedLayout(new PixelPadding(80, 20, 50, 50));
        var sp = myPlot.Add.Scatter(dataX, prices.Values.Select(x => (double)x).ToArray());
        sp.MarkerStyle = MarkerStyle.None;
        sp.LineStyle = new LineStyle() { Color = Color.FromHex("#78a2bd"), Width = 2 };
        myPlot.AxisStyler.DateTimeTicks(Edge.Bottom);
        myPlot.Title(
            $"Coinbase {symbol} CVD (2W) {prices.Last().Key.AddHours(9):yyyy-MM-dd HH}");

        myPlot.Render(s, new PixelRect(0, 1200, 380, 0));
        s.Save();

        myPlot = new Plot();
        myPlot.FixedLayout(new PixelPadding(80, 20, 30, 20));

        string[] colors = { "#78a2bd", "#e9b176", "#72b074", "#c86e72", "#896da0", "#b0918e", "#c887b2" };
        int idx = 0;
        foreach (var cvdSeries in series)
        {
            double lastDelta = 0;
            if (!cvdSeries.CVDData.Any())
            {
                idx++;
                continue;
            }

            double[] dataY = prices.Keys.Select(x =>
            {
                lastDelta = (double)(cvdSeries.CVDData.Any(y => y.Timestamp == x)
                    ? cvdSeries.CVDData.FirstOrDefault(y => y.Timestamp == x)!.Delta
                    : (decimal)lastDelta);

                return lastDelta;
            }).ToArray();

            var sc = myPlot.Add.Scatter(dataX, dataY);
            sc.MarkerStyle = MarkerStyle.None;
            sc.LineStyle = new LineStyle() { Color = Color.FromHex(colors[idx++]), Width = 2 };
        }

        myPlot.AxisStyler.DateTimeTicks(Edge.Bottom);  

        s.DrawText("Study trade with Bigshort23 (Generated by QuickView)", new SKPoint(400, 390),
            new SKPaint() { Color = SKColors.Black, TextSize = 20, FakeBoldText = true });
        s.ClipRect(new SKRect(0, 400, 1200, 800));
        myPlot.Render(s, new PixelRect(0, 1200, 800, 400));
        s.Save();

        using SKData data = r.Encode(SKEncodedImageFormat.Png, 100);
        MemoryStream stream = new MemoryStream();

        data.SaveTo(stream);

        // Console.Clear();
        return stream;
    }
}
